{
    "rules": [
        {
            "name": "preserve_comments",
            "description": "Do not rewrite comments if they correctly describe the logic",
            "type": "comment",
            "severity": "warning",
            "message": "Preserve existing comments that correctly describe the code logic",
            "guidelines": [
                "Keep comments exactly as they are if they accurately describe the code",
                "Only modify comments if they are incorrect or misleading",
                "If a comment is technically correct but could be improved, keep it as is",
                "If a comment uses outdated terminology but is correct, keep it as is",
                "If a comment could be more concise but is correct, keep it as is"
            ]
        },
        {
            "name": "minimal_changes",
            "description": "You should maintain the original code as much as possible and make ONLY the minimal changes needed to fix the issue",
            "type": "code",
            "severity": "warning",
            "message": "Make only the minimal necessary changes to fix issues while preserving the original code structure",
            "guidelines": [
                "Make the smallest possible changes to fix issues",
                "Do not refactor or restructure code unless absolutely necessary",
                "Preserve the original code structure and style",
                "Focus changes only on fixing the specific issue",
                "If a larger change would prevent future issues, still make minimal changes and document the potential future improvements",
                "If the current code structure is problematic, make minimal changes and document the structural issues for future consideration",
                "If a small change would make the code less maintainable, still make minimal changes and document the maintainability concerns"
            ]
        },
        {
            "name": "conda_environment",
            "description": "Do not install any new or updated package globally, all new packages should be installed inside virtual conda environment used for this project",
            "type": "environment",
            "severity": "warning",
            "message": "Install all new packages in the project's conda environment, not globally",
            "guidelines": [
                "All new package installations must be in the project's conda environment",
                "No global package installations or updates",
                "If a package is already installed globally, still install it in the conda environment",
                "If a package needs to be installed in multiple environments, install it in each environment separately",
                "If a package requires system-level dependencies, document them in the project's setup instructions"
            ]
        },
        {
            "name": "model_selection",
            "description": "Preserve user-specified model choices and configurations",
            "type": "configuration",
            "severity": "warning",
            "message": "Do not modify model names or configurations without explicit request",
            "guidelines": [
                "Never change model names or API configurations without explicit request",
                "Preserve user-specified model choices and parameters",
                "If suggesting model changes, provide justification and wait for approval",
                "Document any assumptions about model selection",
                "When in doubt, ask for clarification rather than making assumptions"
            ]
        },
        {
            "name": "openai_api_syntax",
            "description": "Always use the latest OpenAI API syntax (v1.0.0+)",
            "type": "api",
            "severity": "error",
            "message": "Use the current OpenAI API syntax for Python SDK v1.0.0 and above",
            "guidelines": [
                "Always use openai.chat.completions.create instead of openai.ChatCompletion.create or acreate",
                "Access response content via response.choices[0].message.content",
                "Do not use deprecated methods like openai.Completion.create",
                "Do not use async/await with OpenAI API calls as they are synchronous in v1.0.0+",
                "Initialize client using 'client = OpenAI()' and use it for all API calls",
                "Prefer environment variables for API keys over direct assignment",
                "If direct assignment is needed, use 'client = OpenAI(api_key=your_key)'",
                "Version compatibility: This syntax is valid for OpenAI Python SDK v1.0.0 and above",
                "If you need to support older versions, document this requirement explicitly"
            ]
        },
        {
            "name": "message_tracking",
            "description": "Track message count in each response to help monitor context limitations",
            "type": "conversation",
            "severity": "error",
            "message": "Include message count in each response and initiate number test at chat start",
            "guidelines": [
                "Start counting from the first message in each new chat",
                "Include 'Message count: X' at the start of each response",
                "Use this to help identify when to test context limitations",
                "Reset count when starting a new chat",
                "REQUIRED: Start each new chat with 'My number to remember is: 555'",
                "REQUIRED: After every 5th message, ask 'What's the number?'",
                "If the number is forgotten, document it as a context limitation",
                "This is a critical part of monitoring context limitations"
            ]
        }
    ]
} 